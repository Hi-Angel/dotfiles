#!/bin/python3

# creates template for git-commit

from sys import argv, exit
import subprocess

commit_msg_file = open(argv[1], 'r+', encoding="utf8", errors='ignore')

# don't use readlines(), it inserts newline characters
commit_msg_split = commit_msg_file.read().splitlines()
if commit_msg_split[0] != "": # don't change anything for git commit --amend
    exit(0)

# String â†’ [String]
def run_cmd(cmd):
    return subprocess.run(cmd.split(), stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')

def last_dir_or_filename(filepath):
    path_units = filepath.split('/')
    list_to_prefer_filename = ['src', 'scripts']
    last_dir = path_units[-2] if len(path_units) > 2 else None
    return (last_dir if (last_dir and last_dir not in list_to_prefer_filename) \
                     else path_units[-1])

files_changed = run_cmd("git diff --name-only --cached")

# more fine-grained logic (such as per project, and different conditions) can
# be added
commit_msg_split[0] = last_dir_or_filename(files_changed[0]) + ": "
commit_msg_file.seek(0)
commit_msg_file.write('\n'.join(commit_msg_split))
